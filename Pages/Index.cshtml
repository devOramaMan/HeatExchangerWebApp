@page
@model IndexModel
@{
    ViewData["Title"] = "Heat Exchanger Monitor";
}

<div class="ventilation-container">
    <div class="house-diagram">
        <div class="house">
            <div class="roof"></div>
            <div class="house-body">
                <div class="ventilation-unit">
                    <div class="chambers-container">
                        <div class="chamber" id="chamber1">
                            <div class="chamber-label">Supply Air</div>
                            <div class="temperature-display">
                                <span class="temp-value" id="temp2">18.0</span>
                                <span class="temp-unit">°C</span>
                            </div>
                        </div>
                        <div class="chamber" id="chamber2">
                            <div class="chamber-label">Exhaust Air Out</div>
                            <div class="temperature-display">
                                <span class="temp-value" id="temp4">8.0</span>
                                <span class="temp-unit">°C</span>
                            </div>
                        </div>
                        <div class="chamber" id="chamber3">
                            <div class="chamber-label">Extract Air</div>
                            <div class="temperature-display">
                                <span class="temp-value" id="temp3">20.0</span>
                                <span class="temp-unit">°C</span>
                            </div>
                        </div>
                        <div class="chamber" id="chamber4">
                            <div class="chamber-label">Outdoor Air In</div>
                            <div class="temperature-display">
                                <span class="temp-value" id="temp1">5.0</span>
                                <span class="temp-unit">°C</span>
                            </div>
                        </div>
                    </div>
                    <!-- Central heat exchanger core -->
                    <div class="heat-exchanger-core">
                        <div class="core-inner">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Efficiency calculation -->
        <div class="efficiency-display">
            <h3>Efficiency</h3>
            <div class="efficiency-value" id="efficiencyValue">78.6%</div>
            <div class="efficiency-formula">η = (T2-T1)/(T3-T1) × 100%</div>
        </div>
    </div>
    
    <!-- Core Controls -->
    <div class="core-controls">
        <h4>Heat Exchanger Core Controls</h4>
        <div class="control-group">
            <label class="control-label">
                <input type="checkbox" id="rotationToggle" />
                Enable Rotation
            </label>
            <div class="rpm-control">
                <label for="rpmSlider">RPM: <span id="rpmValue">60</span></label>
                <input type="range" id="rpmSlider" min="10" max="300" value="60" />
            </div>
        </div>
    </div>

    <!-- Data Source Toggle -->
    <div class="core-controls">
        <h4>Data Source</h4>
        <div class="control-group">
            <label class="control-label">
                <input type="checkbox" id="dataSourceToggle" />
                Use Database (simulator writes to DB)
            </label>
            <div id="dataSourceStatus" class="data-source-status">Mode: Simulator Only</div>
        </div>
    </div>

    <!-- Efficiency chart -->
    <div class="chart-container">
        <canvas id="efficiencyChart" width="800" height="300"></canvas>
    </div>

    <!-- Database Status -->
    <div class="database-status">
        <h4>Database Connection Status</h4>
        <div id="dbStatus" class="status-indicator">Checking...</div>
        <button onclick="testDatabaseConnection()" class="btn btn-primary">Test Connection</button>
        <button onclick="insertTestData()" class="btn btn-success">Insert Test Data</button>
        <button onclick="getLatestReadings()" class="btn btn-info">Get Latest Readings</button>
    </div>

    <!-- Terminology -->
    <div class="terminology">
        <h4>Heat Exchanger Terminology</h4>
        <!-- bullets for T1, T2, T3, T4 -->
        <ul>
            <li><strong>T1:</strong> Outdoor Air In   - Fresh air drawn into the ventilation unit from outside</li>
            <li><strong>T2:</strong> Supply Air       - Fresh air delivered into indoor spaces from the ventilation unit</li>
            <li><strong>T3:</strong> Extract Air      - Air from indoor spaces that is being expelled to the ventilation unit</li>
            <li><strong>T4:</strong> Exhaust Air Out  - Air expelled from the ventilation unit to the outside</li>
        </ul>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Data source mode
        let useDatabaseMode = false;
        const dataSourceToggle = document.getElementById('dataSourceToggle');
        const dataSourceStatus = document.getElementById('dataSourceStatus');

        dataSourceToggle.addEventListener('change', () => {
            useDatabaseMode = dataSourceToggle.checked;
            if (useDatabaseMode) {
                dataSourceStatus.textContent = 'Mode: Database (Simulator → DB → UI)';
                dataSourceStatus.style.color = '#2e7d32';
            } else {
                dataSourceStatus.textContent = 'Mode: Simulator Only';
                dataSourceStatus.style.color = '#666';
            }
        });

        // Efficiency calculation
        function calculateEfficiency() {
            const t1 = currentData.temp1; // T1: Outdoor Air In (Chamber 4)
            const t2 = currentData.temp2; // T2: Supply Air (Chamber 1)
            const t3 = currentData.temp3; // T3: Extract Air (Chamber 3)
            const t4 = currentData.temp4; // T4: Exhaust Air Out (Chamber 2)
            
            // Efficiency = (T2-T1)/(T3-T1) * 100
            if (t3 !== t1) {
                const efficiency = ((t2 - t1) / (t3 - t1)) * 100;
                return Math.max(0, Math.min(100, efficiency)); // Limit between 0-100%
            }
            return 0;
        }
        
        function updateEfficiency() {
            const efficiency = calculateEfficiency();
            document.getElementById('efficiencyValue').textContent = efficiency.toFixed(1) + '%';
            
            // Update chart
            updateChart(efficiency);
        }

        // Hardcoded data simulating data source fetch
        let currentData = {
            temp1: 5.0,   // T1: Outdoor Air In (Chamber 4)
            temp2: 18.0,  // T2: Supply Air (Chamber 1) 
            temp3: 20.0,  // T3: Extract Air (Chamber 3)
            temp4: 8.0    // T4: Exhaust Air Out (Chamber 2)
        };

        // Simulates fetching data from API/database
        async function fetchTemperatureData() {
            if (useDatabaseMode) {
                // Database mode: Write simulated data to DB, then read from DB
                const writeSuccess = await writeSimulatedDataToDB();
                if (writeSuccess) {
                    // Small delay to ensure DB commit completes
                    await new Promise(resolve => setTimeout(resolve, 50));
                    await readDataFromDB();
                } else {
                    console.warn('Skipping read due to write failure');
                }
            } else {
                // Simulator mode: Generate and display data directly
                const baseValues = {
                    temp1: 5.0,
                    temp2: 18.0,
                    temp3: 20.0,
                    temp4: 8.0
                };

                // Add some random variation (±2 degrees)
                currentData.temp1 = baseValues.temp1 + (Math.random() - 0.5) * 4;
                currentData.temp2 = baseValues.temp2 + (Math.random() - 0.5) * 4;
                currentData.temp3 = baseValues.temp3 + (Math.random() - 0.5) * 4;
                currentData.temp4 = baseValues.temp4 + (Math.random() - 0.5) * 4;

                // Update display
                updateTemperatureDisplay();
                updateEfficiency();
            }
        }

        async function writeSimulatedDataToDB() {
            // Generate simulated data
            const baseValues = {
                temp1: 5.0,
                temp2: 18.0,
                temp3: 20.0,
                temp4: 8.0
            };

            const simulatedData = {
                temp1: baseValues.temp1 + (Math.random() - 0.5) * 4,
                temp2: baseValues.temp2 + (Math.random() - 0.5) * 4,
                temp3: baseValues.temp3 + (Math.random() - 0.5) * 4,
                temp4: baseValues.temp4 + (Math.random() - 0.5) * 4
            };

            const testData = {
                T1_Outdoor_Air_In_Temperature: simulatedData.temp1,
                T2_Supply_Air_Temperature: simulatedData.temp2,
                T3_Extract_Air_Temperature: simulatedData.temp3,
                T4_Exhaust_Air_Out_Temperature: simulatedData.temp4
            };

            try {
                const response = await fetch('/api/DatabaseTest/insert-test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(testData)
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Failed to write to database:', errorText);
                    return false;
                }
                
                const result = await response.json();
                console.log('Successfully wrote to database:', result.Result?.Id);
                return true;
            } catch (error) {
                console.error('Failed to write to database:', error);
                return false;
            }
        }

        async function readDataFromDB() {
            try {
                console.log('Fetching readings from /api/DatabaseTest/readings...');
                const response = await fetch('/api/DatabaseTest/readings');
                console.log('Response status:', response.status, response.statusText);
                
                const result = await response.json();
                console.log('Response data:', result);
                
                if (response.ok && result.readings && result.readings.length > 0) {
                    const latest = result.readings[0];
                    console.log('Latest reading:', latest);
                    
                    currentData.temp1 = parseFloat(latest.t1_Outdoor_Air_In_Temperature);
                    currentData.temp2 = parseFloat(latest.t2_Supply_Air_Temperature);
                    currentData.temp3 = parseFloat(latest.t3_Extract_Air_Temperature);
                    currentData.temp4 = parseFloat(latest.t4_Exhaust_Air_Out_Temperature);
                    
                    console.log('Updated currentData:', currentData);
                    
                    updateTemperatureDisplay();
                    updateEfficiency();
                    console.info('✓ Successfully read data from database');
                }
                else{
                    console.warn('No readings available from database. Response OK:', response.ok, 'Readings:', result.readings);
                }
            } catch (error) {
                console.error('Failed to read from database:', error);
            }
        }

        function updateTemperatureDisplay() {
            // Map temperature data to correct chamber positions
            document.getElementById('temp1').textContent = currentData.temp1.toFixed(1); // T1: Outdoor Air In (Chamber 4)
            document.getElementById('temp2').textContent = currentData.temp2.toFixed(1); // T2: Supply Air (Chamber 1)
            document.getElementById('temp3').textContent = currentData.temp3.toFixed(1); // T3: Extract Air (Chamber 3)
            document.getElementById('temp4').textContent = currentData.temp4.toFixed(1); // T4: Exhaust Air Out (Chamber 2)
        }
        
        // Chart setup
        let chartData = {
            labels: [],
            datasets: [{
                label: 'Efficiency (%)',
                data: [],
                borderColor: 'rgb(75, 192, 192)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                tension: 0.1
            }]
        };
        
        const ctx = document.getElementById('efficiencyChart').getContext('2d');
        const chart = new Chart(ctx, {
            type: 'line',
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        title: {
                            display: true,
                            text: 'Efficiency (%)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    }
                },
                plugins: {
                    title: {
                        display: false,
                        text: 'Heat Exchanger Efficiency'
                    }
                }
            }
        });
        
        function updateChart(efficiency) {
            const now = new Date().toLocaleTimeString();
            chartData.labels.push(now);
            chartData.datasets[0].data.push(efficiency);
            
            // Keep only the last 20 data points
            if (chartData.labels.length > 20) {
                chartData.labels.shift();
                chartData.datasets[0].data.shift();
            }
            
            chart.update();
        }
        
        // Core rotation control
        const coreElement = document.querySelector('.heat-exchanger-core');
        const rotationToggle = document.getElementById('rotationToggle');
        const rpmSlider = document.getElementById('rpmSlider');
        const rpmValue = document.getElementById('rpmValue');

        function updateRotation() {
            if (rotationToggle.checked) {
                const rpm = parseInt(rpmSlider.value);
                const rotationDuration = 60 / rpm; // Convert RPM to seconds per rotation
                
                coreElement.style.setProperty('--rotation-duration', rotationDuration + 's');
                coreElement.classList.add('rotating');
                
                // Update RPM display
                rpmValue.textContent = rpm;
            } else {
                coreElement.classList.remove('rotating');
            }
        }

        // Event listeners for rotation controls
        rotationToggle.addEventListener('change', updateRotation);
        rpmSlider.addEventListener('input', () => {
            rpmValue.textContent = rpmSlider.value;
            if (rotationToggle.checked) {
                updateRotation();
            }
        });

        // Initial data load
        fetchTemperatureData();
        
        // Simulate data fetching every 3 seconds (as if coming from sensors/API)
        setInterval(() => {
            fetchTemperatureData();
        }, 3000);

        // Database testing functions
        async function testDatabaseConnection() {
            const statusElement = document.getElementById('dbStatus');
            statusElement.textContent = 'Testing connection...';
            statusElement.className = 'status-indicator testing';
            
            try {
                const response = await fetch('/api/DatabaseTest/test-connection');
                const result = await response.json();
                
                if (response.ok) {
                    statusElement.textContent = `Connected - ${result.DatabaseInfo?.Database || 'Unknown DB'}`;
                    statusElement.className = 'status-indicator success';
                    console.log('Database Info:', result);
                } else {
                    statusElement.textContent = `Failed - ${result.Message}`;
                    statusElement.className = 'status-indicator error';
                    console.error('Connection failed:', result);
                }
            } catch (error) {
                statusElement.textContent = `Error - ${error.message}`;
                statusElement.className = 'status-indicator error';
                console.error('Network error:', error);
            }
        }

        async function insertTestData() {
            const testData = {
                T1_Outdoor_Air_In_Temperature: currentData.temp1,
                T2_Supply_Air_Temperature: currentData.temp2,
                T3_Extract_Air_Temperature: currentData.temp3,
                T4_Exhaust_Air_Out_Temperature: currentData.temp4
            };

            try {
                const response = await fetch('/api/DatabaseTest/insert-test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(testData)
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    alert(`Data inserted successfully! ID: ${result.Result?.Id}`);
                    console.log('Inserted data:', result);
                } else {
                    alert(`Insert failed: ${result.Message}`);
                    console.error('Insert failed:', result);
                }
            } catch (error) {
                alert(`Error: ${error.message}`);
                console.error('Network error:', error);
            }
        }

        async function getLatestReadings() {
            try {
                const response = await fetch('/api/DatabaseTest/readings');
                const result = await response.json();
                
                if (response.ok) {
                    const readings = Array.isArray(result.readings) ? result.readings : [];
                    console.log('Latest readings:', readings);

                    if (readings.length === 0) {
                        alert('No readings available yet.');
                        return;
                    }

                    const readingsText = readings.map(r => 
                        `${new Date(r.timestamp).toLocaleString()}: T1=${r.t1_Outdoor_Air_In_Temperature}°C T2=${r.t2_Supply_Air_Temperature}°C`
                    ).join('\n');

                    const count = typeof result.count === 'number' ? result.count : readings.length;
                    alert(`Latest ${count} readings:\n\n${readingsText}`);
                } else {
                    alert(`Failed to get readings: ${result.message || result.Message}`);
                    console.error('Get readings failed:', result);
                }
            } catch (error) {
                alert(`Error: ${error.message}`);
                console.error('Network error:', error);
            }
        }

        // Test database connection on page load
        setTimeout(testDatabaseConnection, 1000);
    </script>
}
